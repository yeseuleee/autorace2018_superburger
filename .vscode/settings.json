{
  "C_Cpp.autoAddFileAssociations": true,

  // Controls the auto-completion provider. "Default" uses the active IntelliSense engine. "Disabled" uses the word-based completion provided by Visual Studio Code.
  "C_Cpp.autocomplete": "Default",

  // Name of the predefined style used as a fallback in case clang-format is invoked with style "file" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use "{key: value, ...}" to set specific parameters, e.g.: "{ BasedOnStyle: LLVM, IndentWidth: 8 }"
  "C_Cpp.clang_format_fallbackStyle": "Visual Studio",

  // The full path of the clang-format executable.
  "C_Cpp.clang_format_path": null,

  // If set, overrides the include sorting behavior determined by the SortIncludes parameter.
  "C_Cpp.clang_format_sortIncludes": null,

  // Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use "file" to load the style from a .clang-format file in the current or parent directory. Use "{key: value, ...}" to set specific parameters, e.g.: "{ BasedOnStyle: LLVM, IndentWidth: 8 }"
  "C_Cpp.clang_format_style": "file",

  // Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
  "C_Cpp.commentContinuationPatterns": [
    "/**"
  ],

  // Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
  "C_Cpp.configurationWarnings": "Enabled",

  // The value to use in a configuration if "browse.databaseFilename" is either not specified or set to "${default}".
  "C_Cpp.default.browse.databaseFilename": null,

  // The value to use in a configuration if "browse.limitSymbolsToIncludedHeaders" is either not specified or set to "${default}".
  "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

  // The value to use in a configuration if "browse.path" is not specified, or the values to insert if "${default}" is present in "browse.path".
  "C_Cpp.default.browse.path": null,

  // The value to use in a configuration if "compileCommands" is either not specified, or set to "${default}".
  "C_Cpp.default.compileCommands": null,

  // The value to use in a configuration if "compilerPath" is either not specified or set to "${default}".
  "C_Cpp.default.compilerPath": null,

  // The value to use in a configuration if "configurationProvider" is either not specified or set to "${default}".
  "C_Cpp.default.configurationProvider": null,

  // The value to use in a configuration if "cppStandard" is either not specified or set to "${default}".
  "C_Cpp.default.cppStandard": null,

  // The value to use in a configuration if "cStandard" is either not specified or set to "${default}".
  "C_Cpp.default.cStandard": null,

  // The value to use in a configuration if "defines" is not specified, or the values to insert if "${default}" is present in "defines".
  "C_Cpp.default.defines": null,

  // The value to use in a configuration if "forcedInclude" is not specified, or the values to insert if "${default}" is present in "forcedInclude".
  "C_Cpp.default.forcedInclude": null,

  // The value to use in a configuration if "includePath" is not specified, or the values to insert if "${default}" is present in "includePath".
  "C_Cpp.default.includePath": null,

  // The value to use in a configuration if "intelliSenseMode" is either not specified or set to "${default}".
  "C_Cpp.default.intelliSenseMode": null,

  // The value to use in a configuration if "macFrameworkPath" is not specified, or the values to insert if "${default}" is present in "macFrameworkPath".
  "C_Cpp.default.macFrameworkPath": null,

  // The value to use for the system include path. If set, it overrides the system include path acquired via "compilerPath" and "compileCommands" settings.
  "C_Cpp.default.systemIncludePath": null,

  // Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.
  "C_Cpp.default.windowsSdkVersion": null,

  // Controls whether inactive preprocessor blocks are colored differently than active code. This setting is ignored by the Tag Parser engine.
  "C_Cpp.dimInactiveRegions": true,

  // Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. Warnings about #includes that could not be located will always be reported to the editor. This setting is ignored by the Tag Parser engine.
  "C_Cpp.errorSquiggles": "Enabled",

  // Instructs the extension when to use the "files.exclude" setting when determining which files should be added to the code navigation database while traversing through the paths in the "browse.path" array. "checkFolders" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). "checkFilesAndFolders" means that the exclusion filters will be evaluated against every file and folder encountered. If your "files.exclude" setting only contains folders, then "checkFolders" is the best choice and will increase the speed at which the extension can initialize the code navigation database.
  "C_Cpp.exclusionPolicy": "checkFolders",

  // "Default" enables code formatting. "Disabled" disables code formatting.
  "C_Cpp.formatting": "Default",

  // 
  "C_Cpp.inactiveRegionOpacity": 0.55,

  // Controls the IntelliSense provider. "Tag Parser" provides "fuzzy" results that are not context-aware. "Default" provides context-aware results and is in preview mode - member list, hover tooltips, and error squiggles are currently implemented. Features not yet implemented in the new default engine will use the tag parser engine instead.
  "C_Cpp.intelliSenseEngine": "Default",

  // Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.
  "C_Cpp.intelliSenseEngineFallback": "Enabled",

  // The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information < Debug.
  "C_Cpp.loggingLevel": "Error",

  // Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.
  "C_Cpp.navigation.length": 60,

  // The character used as a path separator for #include auto-completion results.
  "C_Cpp.preferredPathSeparator": "Forward Slash",

  // Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.
  "C_Cpp.workspaceParsingPriority": "highest",
  // Controls if the diff editor shows changes in leading or trailing whitespace as diffs
  "diffEditor.ignoreTrimWhitespace": true,

  // Controls if the diff editor shows +/- indicators for added/removed changes
  "diffEditor.renderIndicators": true,

  // Controls if the diff editor shows the diff side by side or inline
  "diffEditor.renderSideBySide": true,

  // Controls if suggestions should be accepted on commit characters. For instance in JavaScript the semi-colon (';') can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,

  // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
  "editor.acceptSuggestionOnEnter": "on",

  // Controls whether the editor should run in a mode where it is optimized for screen readers.
  "editor.accessibilitySupport": "auto",

  // Controls if the editor should automatically close brackets after opening them
  "editor.autoClosingBrackets": true,

  // Controls if the editor should automatically adjust the indentation when users type, paste or move lines. Indentation rules of the language must be available.
  "editor.autoIndent": true,

  // Code action kinds to be run on save.
  "editor.codeActionsOnSave": {},

  // Timeout for code actions run on save.
  "editor.codeActionsOnSaveTimeout": 750,

  // Controls if the editor shows CodeLens
  "editor.codeLens": true,

  // Controls whether the editor should render the inline color decorators and color picker.
  "editor.colorDecorators": true,

  // Control the cursor animation style.
  "editor.cursorBlinking": "blink",

  // Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'
  "editor.cursorStyle": "line",

  // Controls the width of the cursor when editor.cursorStyle is set to 'line'
  "editor.cursorWidth": 0,

  // When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.
  "editor.detectIndentation": true,

  // Controls if the editor should allow to move selections via drag and drop.
  "editor.dragAndDrop": true,

  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": true,

  // Controls if Find in Selection flag is turned on when multiple characters or lines of text are selected in the editor
  "editor.find.autoFindInSelection": false,

  // Controls if we seed the search string in Find Widget from editor selection
  "editor.find.seedSearchStringFromSelection": true,

  // Controls whether the editor has code folding enabled
  "editor.folding": true,

  // Controls the way folding ranges are computed. 'auto' picks uses a language specific folding strategy, if available. 'indentation' forces that the indentation based folding strategy is used.
  "editor.foldingStrategy": "auto",

  // Controls the font family.
  "editor.fontFamily": "'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",

  // Enables font ligatures
  "editor.fontLigatures": false,

  // Controls the font size in pixels.
  "editor.fontSize": 14,

  // Controls the font weight.
  "editor.fontWeight": "normal",

  // Controls if the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": false,

  // Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.
  "editor.formatOnSave": false,

  // Format on save timeout. Specifies a time limit in milliseconds for formatOnSave-commands. Commands taking longer than the specified timeout will be cancelled.
  "editor.formatOnSaveTimeout": 750,

  // Controls if the editor should automatically format the line after typing
  "editor.formatOnType": false,

  // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
  "editor.glyphMargin": true,

  // Controls if the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,

  // Controls whether the editor should highlight the active indent guide
  "editor.highlightActiveIndentGuide": true,

  // Controls the delay after which to show the hover
  "editor.hover.delay": 300,

  // Controls if the hover is shown
  "editor.hover.enabled": true,

  // Controls if the hover should remain visible when mouse is moved over it
  "editor.hover.sticky": true,

  // Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // Special handling for large files to disable certain memory intensive features.
  "editor.largeFileOptimizations": true,

  // Controls the letter spacing in pixels.
  "editor.letterSpacing": 0,

  // Enables the code action lightbulb
  "editor.lightbulb.enabled": true,

  // Controls the line height. Use 0 to compute the lineHeight from the fontSize.
  "editor.lineHeight": 0,

  // Controls the display of line numbers.
  "editor.lineNumbers": "on",

  // Controls whether the editor should detect links and make them clickable
  "editor.links": true,

  // Highlight matching brackets when one of them is selected.
  "editor.matchBrackets": true,

  // Controls if the minimap is shown
  "editor.minimap.enabled": true,

  // Limit the width of the minimap to render at most a certain number of columns
  "editor.minimap.maxColumn": 120,

  // Render the actual characters on a line (as opposed to color blocks)
  "editor.minimap.renderCharacters": true,

  // Controls whether the minimap slider is automatically hidden.
  "editor.minimap.showSlider": "mouseover",

  // Controls the side where to render the minimap.
  "editor.minimap.side": "right",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events
  "editor.mouseWheelScrollSensitivity": 1,

  // Zoom the font of the editor when using mouse wheel and holding Ctrl
  "editor.mouseWheelZoom": false,

  // Merge multiple cursors when they are overlapping.
  "editor.multiCursorMergeOverlapping": true,

  // The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on macOS. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.
  "editor.multiCursorModifier": "alt",

  // Controls whether the editor should highlight semantic symbol occurrences
  "editor.occurrencesHighlight": true,

  // Controls if a border should be drawn around the overview ruler.
  "editor.overviewRulerBorder": true,

  // Controls the number of decorations that can show up at the same position in the overview ruler
  "editor.overviewRulerLanes": 3,

  // Enables pop-up that shows parameter documentation and type information as you type
  "editor.parameterHints": true,

  // Controls if suggestions should automatically show up while typing
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },

  // Controls the delay in ms after which quick suggestions will show up
  "editor.quickSuggestionsDelay": 10,

  // Controls whether the editor should render control characters
  "editor.renderControlCharacters": false,

  // Controls whether the editor should render indent guides
  "editor.renderIndentGuides": true,

  // Controls how the editor should render the current line highlight, possibilities are 'none', 'gutter', 'line', and 'all'.
  "editor.renderLineHighlight": "line",

  // Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.
  "editor.renderWhitespace": "none",

  // Controls if selections have rounded corners
  "editor.roundedSelection": true,

  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty
  "editor.rulers": [],

  // Controls the number of extra characters beyond which the editor will scroll horizontally
  "editor.scrollBeyondLastColumn": 5,

  // Controls if the editor will scroll beyond the last line
  "editor.scrollBeyondLastLine": true,

  // Controls if the Linux primary clipboard should be supported.
  "editor.selectionClipboard": true,

  // Controls whether the editor should highlight similar matches to the selection
  "editor.selectionHighlight": true,

  // Controls whether the fold controls on the gutter are automatically hidden.
  "editor.showFoldingControls": "mouseover",

  // Controls fading out of unused code.
  "editor.showUnused": true,

  // Controls if the editor will scroll using an animation
  "editor.smoothScrolling": false,

  // Controls whether snippets are shown with other suggestions and how they are sorted.
  "editor.snippetSuggestions": "inline",

  // Keep peek editors open even when double clicking their content or when hitting Escape.
  "editor.stablePeek": false,

  // Font size for the suggest widget
  "editor.suggestFontSize": 0,

  // Line height for the suggest widget
  "editor.suggestLineHeight": 0,

  // Controls if suggestions should automatically show up when typing trigger characters
  "editor.suggestOnTriggerCharacters": true,

  // Controls how suggestions are pre-selected when showing the suggest list.
  "editor.suggestSelection": "recentlyUsed",

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Remove trailing auto inserted whitespace
  "editor.trimAutoWhitespace": true,

  // Inserting and deleting whitespace follows tab stops
  "editor.useTabStops": true,

  // Controls whether completions should be computed based on words in the document.
  "editor.wordBasedSuggestions": true,

  // Characters that will be used as word separators when doing word related navigations or operations
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // Controls how lines should wrap. Can be:
  //  - 'off' (disable wrapping),
  //  - 'on' (viewport wrapping),
  //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
  //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
  "editor.wordWrap": "off",

  // Controls the wrapping column of the editor when `editor.wordWrap` is 'wordWrapColumn' or 'bounded'.
  "editor.wordWrapColumn": 80,

  // Controls the indentation of wrapped lines. Can be one of 'none', 'same', 'indent' or 'deepIndent'.
  "editor.wrappingIndent": "same",
    "workbench.colorTheme": "Solarized Dark",
    "editor.mouseWheelZoom": true,
    "editor.minimap.enabled": false,
    "files.associations": {
        "array": "cpp",
        "deque": "cpp",
        "unordered_map": "cpp",
        "vector": "cpp",
        "initializer_list": "cpp",
        "chrono": "cpp",
        "ratio": "cpp",
        "cctype": "cpp",
        "cmath": "cpp",
        "csignal": "cpp",
        "cstdarg": "cpp",
        "cstddef": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cstring": "cpp",
        "ctime": "cpp",
        "cwchar": "cpp",
        "cwctype": "cpp",
        "atomic": "cpp",
        "strstream": "cpp",
        "cstdint": "cpp",
        "iosfwd": "cpp",
        "thread": "cpp",
        "cinttypes": "cpp",
        "typeindex": "cpp"
    },
    
}